- const getInputName = (f, property) => `${f.name}[${property}]`

mixin formFor(f, form_class, options = {})
    form(action=_.get(options, 'url') class=`${form_class}` method=_.get(options, 'method', 'get'))
        block

mixin input(f, property, options = { as: "text", label: "" })
    - const value = f.object[property] === undefined ? '' : f.object[property]
    .form-group.row
        label.col-md-3.col-form-label.text-nowrap(for=options['label'])= options['label']
        .col-md-9(class=(f.errors[property] && 'has-danger'))
            input(name=getInputName(f, property) class='form-control' type=options['as'] id=options['label'] value=`${value}`)
            if f.errors[property]
                .form-control-feedback.has-danger= f.errors[property].map(({ message }) => message).join('. ')

mixin button(f, button_label = 'Ok', type = 'submit')
    .form-group.row
        input(class='btn col-md-3 btn-success text-nowrap' type=`${type}` value=`${button_label}`)

mixin textarea(f, property, options = { label: "" })
    - const value = f.object[property] === undefined ? '' : f.object[property]
    .form-group.row
        label.col-md-3.col-form-label.text-nowrap(for=options['label'])= options['label']
        .col-md-9(class=(f.errors[property] && 'has-danger'))
            textarea(name=getInputName(f, property) id=options['label'] class='form-control' type='text')= value
            if f.errors[property]
                .form-control-feedback= f.errors[property].map(({message}) => message).join('. ')

mixin select(f, property, options = { users: [], creator: "", creatorId: "", label: ""})
    - const value = f.object[property] === undefined ? '' : f.object[property]
    .form-group.row
        label.col-md-3.col-form-label.text-nowrap(for=options['label'])= options['label']
        .col-md-9
            select(name=getInputName(f, property) id=options['label'] class='form-control' value=`${value}`)
                option(value= options['creatorId'] selected='selected')= options['creator'].fullName
                each user in options['users']
                    option(value= user.id)= user.fullName

mixin formSearch()
    form(action=urlFor('tasks#index') method='get')
        block


mixin selectTags(tags)
    .form-group
        select(class='form-control' name='tagId')
            option(selected='') All tags
            each tag in tags
                option(value= tag.id)= tag.name

mixin selectStatus(statuses)
    .form-group
        select(class='form-control' name='statusId')
            option(selected='') All statuses
            each status in statuses
                option(value= status.id)= status.name

mixin selectUsers(users)
    .form-group
        select(class='form-control' name='assignedToId')
            option(selected='') All assignee
            each user in users
                option(value= user.id)= user.fullName

mixin inputTags(tags, e)
    - const value = tags
    .form-group(class=('tags' && 'has-danger'))
        input(name='form[tags]' class='form-control' type='text' value=`${value}` placeholder=`${tags}`)
        if e
            .form-control-feedback= e.message

mixin reselect(f, property, users, assingnedTo, assignedToId)
    - const value = f.object[property] === undefined ? '' : f.object[property]
    .form-group(class=(f.errors[property] && 'has-danger'))
        select(name=getInputName(f, property) class='form-control' value=`${value}`)
            option(value= assignedToId selected='selected')= assingnedTo
            each user in users
                option(value= user.id)= user.fullName
        if f.errors[property]
            .form-control-feedback= f.errors[property].map(({message}) => message).join('. ')