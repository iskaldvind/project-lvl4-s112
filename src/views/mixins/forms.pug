- const getInputName = (f, property) => `${f.name}[${property}]`

mixin formFor(f, form_class, options = {})
    form(action=_.get(options, 'url') class=`${form_class}` method=_.get(options, 'method', 'get'))
        block

mixin input(f, property, options = { as: "text", label: "", valueFormatter: null })
    - const rawValue = f.object[property] === undefined ? '' : f.object[property]
    - const value = options['valueFormatter'] ? options['valueFormetter'](rawValue) : rawValue
    .form-group.row
        label.col-3.col-form-label.text-nowrap(for=options['label'])= options['label']
        .col-9(class=(f.errors[property] && 'has-danger'))
            input(name=getInputName(f, property) class='form-control' type=options['as'] id=options['label'] value=`${value}`)
            if f.errors[property]
                .form-control-feedback.has-danger= f.errors[property].map(({ message }) => message).join('. ')

mixin confirmButton(f, button_label = 'Ok')
    .form-group.row
        input(class=`btn col-md-3 btn-success text-nowrap` type='submit' value=`${button_label}`)

mixin editButton(options = { target: '', id: 0, label: '' })
    .col-6
        form(action=urlFor(`${options['target']}s#edit`, {id: options['id']}) method='get')
            button.btn.btn-block.btn-warning(type='submit')= options['label']

mixin deleteButton(options = { target: '', id: 0, label: '' })
    .col-6
        form(action=urlFor(`${options['target']}s#destroy`, {id: options['id']}) method='post')
            button.btn.btn-block.btn-danger(type='submit' name='_method' value='delete')= options['label']

mixin textarea(f, property, options = { label: "" })
    - const value = f.object[property] === undefined ? '' : f.object[property]
    .form-group.row
        label.col-3.col-form-label.text-nowrap(for=options['label'])= options['label']
        .col-9(class=(f.errors[property] && 'has-danger'))
            textarea(name=getInputName(f, property) id=options['label'] class='form-control' type='text')= value
            if f.errors[property]
                .form-control-feedback= f.errors[property].map(({message}) => message).join('. ')

mixin select(f, property, options = { collection: [], defaultOption: "", defaultID: "", label: "", property: ""})
    - const value = f.object[property] === undefined ? '' : f.object[property]
    .form-group.row
        label.col-3.col-form-label.text-nowrap(for=options['label'])= options['label']
        .col-9
            select(name=getInputName(f, property) id=options['label'] class='form-control' value=`${value}`)
                option(value= options['defaultID'] selected='selected')= options['defaultOption'][options['property']]
                each item in options['collection']
                    option(value= item.id)= item[options['property']]

mixin filterSelect(options = { name: "", defaultLabel: "", collection: [], property: "" })
    .col-2
        select(class='form-control' name=options['name'])
            option(selected='')= options['defaultLabel']
            each item in options['collection']
                option(value= item.id)= item[`${options['property']}`]

mixin inputTags(tags, e)
    - const value = tags
    .form-group(class=('tags' && 'has-danger'))
        input(name='form[tags]' class='form-control' type='text' value=`${value}` placeholder=`${tags}`)
        if e
            .form-control-feedback= e.message

mixin reselect(f, property, options = { users: [], assignedTo: '', assignedToId: 0, label: '' })
    - const value = f.object[property] === undefined ? '' : f.object[property]
    .form-group.row
        select(name=getInputName(f, property) id=options['label'] class='form-control' value=`${value}`)
            option(value= options['creatorId'] selected='selected')= options['creator'].fullName
            each user in options['users']
                option(value= user.id)= user.fullName



